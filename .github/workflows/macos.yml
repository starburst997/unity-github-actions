name: Build macOS

env:
  UNITY_PATH: ${{ vars.APP_UNITY_PATH }}
  UNITY_VERSION: ${{ vars.APP_UNITY_VERSION }}
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
  DISCORD_COLOR: "#00b7f9"

on: 
  workflow_call:
    outputs:
      zip-name: 
        value: ${{ jobs.post-build.outputs.zip-name }}
      zip-url: 
        value: ${{ jobs.post-build.outputs.zip-url }}
      zip-size: 
        value: ${{ jobs.post-build.outputs.zip-size }}
      dmg-name: 
        value: ${{ jobs.post-build.outputs.dmg-name }}
      dmg-url: 
        value: ${{ jobs.post-build.outputs.dmg-url }}
      dmg-size: 
        value: ${{ jobs.post-build.outputs.dmg-size }}
      links: 
        value: ${{ jobs.post-build.outputs.links }}
    inputs:
      notes:
        default: ''
        type: string
      upload-artifact:
        default: 'false'
        type: string
      il2cpp:
        default: '0'
        type: string
      library:
        default: 'Library-MacOS'
        type: string
      artifact:
        default: 'build-macos'
        type: string
      s3-folder:
        default: 'macos'
        type: string
      zip-suffix:
        default: '.macos.zip'
        type: string
      dmg-suffix:
        default: '.dmg'
        type: string
      discord:
        default: 'macOS'
        type: string
      release:
        default: 'false'
        type: string
      timeout:
        default: 30
        type: number
      runner:
        default: 'ubuntu-latest'
        type: string
      runner-extra:
        default: 'ubuntu-latest'
        type: string
      runner-sign:
        default: 'macos-13'
        type: string
      generate-appstore:
        default: 'true'
        type: string
      generate-dmg:
        default: 'true'
        type: string
      xcode-cache:
        default: 'false'
        type: string

jobs:
  version:
    uses: starburst997/yearly-version/.github/workflows/version.yml@v1
    secrets: inherit
    with:
      increment: false
      runner: ${{ inputs.runner-extra }}
      build-var: MACOS_BUILD_NUMBER

  build:
    name: Build macOS
    runs-on: ${{ inputs.runner }}
    timeout-minutes: ${{ inputs.timeout }}
    needs: [version]
    outputs:
      discord: ${{ steps.output.outputs.discord }}
      s3: ${{ steps.output.outputs.s3 }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GH_PAT }}
          lfs: true

      - uses: actions/cache/restore@v4
        id: cache
        with:
          path: ${{ env.UNITY_PATH }}/Library
          key: ${{ inputs.library }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - run: pip install -r requirements.txt

      - name: Change package name / set il2cpp
        run: python scripts/workflows/update-project.py "${{ env.UNITY_PATH }}" ${{ vars.IOS_BUNDLE_ID }} ${{ vars.MAC_BUNDLE_ID }} ${{ vars.ANDROID_PACKAGE_NAME }} ${{ inputs.il2cpp }} ${{ needs.version.outputs.build }}

      - name: Create directory first to prevent permission error
        run:  |
          rm -Rf build
          mkdir build

      - name: For code signing / publishing force XCode Project
        run: |
          echo "#if UNITY_EDITOR
          using UnityEditor;
          using UnityEditor.Build;
          using UnityEditor.Build.Reporting;
          public class PreBuildProcessingXCodeFix : IPreprocessBuildWithReport
          {
              public int callbackOrder => 0;
              public void OnPreprocessBuild(BuildReport report)
              {
                  EditorUserBuildSettings.SetPlatformSettings(\"OSXUniversal\", \"CreateXcodeProject\", \"true\");
              }
          }
          #endif" >> "${{ env.UNITY_PATH }}/Assets/PreBuildProcessingXCodeFix.cs"

      - name: Build project
        uses: starburst997/unity-builder@v4
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          runAsHostUser: true
          allowDirtyBuild: true
          targetPlatform: StandaloneOSX
          unityVersion: ${{ env.UNITY_VERSION }}
          projectPath: ${{ env.UNITY_PATH }}
          versioning: Custom
          version: ${{ needs.version.outputs.version }}

      - name: Detect if we can code sign / generate setup
        id: output
        run: |
          echo "discord=${{ secrets.DISCORD_WEBHOOK != '' }}" >> $GITHUB_OUTPUT
          echo "s3=${{ secrets.S3_SECRET_ACCESS_KEY != '' }}" >> $GITHUB_OUTPUT
      
      - name: Copy entitlements file and fix permissions issues
        run: |
          cp -r build/StandaloneOSX/StandaloneOSX ./
          mv StandaloneOSX artifact
          cp "${{ env.UNITY_PATH }}/Assets/Plugins/macOS/Unity.entitlements" artifact/Unity.entitlements

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact }}
          path: artifact

      - uses: actions/cache/save@v4
        if: always() && steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ env.UNITY_PATH }}/Library
          key: ${{ inputs.library }}

  sign:
    name: Code Signing / DMG
    runs-on: ${{ inputs.runner-sign }}
    needs: [version, build]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: starburst997/setup-ruby@jd
        with:
          ruby-version: 3.2
          bundler-cache: true
          add-platform: true
      
      - uses: starburst997/xcode-cache@v1
        if: ${{ inputs.xcode-cache == 'true' }}
        with:
          key: xcode-macos-${{ github.sha }}
          restore-keys: xcode-macos-

      - uses: starburst997/brew-install@v1
        with:
          packages: gnu-sed graphicsmagick imagemagick

      - uses: actions/cache@v4
        with:
          path: ~/.npm
          key: macos-npm

      - run: rm -Rf project
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact }}
          path: project
      
      - name: Figure out the Target Name
        run: |
          TARGET="$(find project -maxdepth 1 -type d -not -name '*.xcodeproj' -not -name '.' -not -name '..' -not -name 'project' -print -quit)"
          echo TARGET="${TARGET##project/}" >> $GITHUB_ENV

      - name: Add Hardened Runtime
        run: |
          gsed -i '/INFOPLIST_FILE = /a ENABLE_HARDENED_RUNTIME = YES;' project/StandaloneOSX.xcodeproj/project.pbxproj
        
      - name: Run fastlane
        env:
          APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
          APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

          MATCH_REPOSITORY: ${{ secrets.MATCH_REPOSITORY }}
          MATCH_DEPLOY_KEY: ${{ secrets.MATCH_DEPLOY_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_P8: ${{ secrets.APPSTORE_P8 }}

          MAC_BUILD_PATH: ${{ format('{0}/{1}', github.workspace, 'project') }}
          MAC_BUNDLE_ID: ${{ vars.MAC_BUNDLE_ID }}

          ITMSTRANSPORTER_FORCE_ITMS_PACKAGE_UPLOAD: false
          
          PROJECT_TARGET: "${{ env.TARGET }}"
          XCODEPROJ_PATH: "StandaloneOSX.xcodeproj"
          PLIST_PATH: "${{ env.TARGET }}/Info.plist"
          ENTITLEMENTS: Unity.entitlements
          VERSION: "false" # "${{ needs.version.outputs.year }}.${{ needs.version.outputs.release }}"
          BUILD_NUMBER: ${{ needs.version.outputs.build }}
          BUILD_PATH: build

          GENERATE_APPSTORE: ${{ inputs.generate-appstore }}
          GENERATE_DEVELOPER_ID: 'true' # Always create .app
          GENERATE_PKG: 'false' # Currently not working
          GENERATE_DMG: ${{ inputs.generate-dmg }}
        shell: bash
        run: |
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${MATCH_DEPLOY_KEY}"
          bundle install
          [[ $GENERATE_APPSTORE == true ]] && bundle exec fastlane mac beta
          [[ $GENERATE_DEVELOPER_ID == true ]] && bundle exec fastlane mac developer_id
          [[ $GENERATE_PKG == true ]] && bundle exec fastlane mac pkg
          echo "Finshed!"

      - run: |
          rm -Rf artifacts
          mkdir artifacts

      - name: Zip .app
        working-directory: build
        run: |
          rm -Rf developer-id.app.zip
          rm -Rf ${{ env.TARGET }}.app
          mv developer-id.app ${{ vars.APP_NAME }}.app
          zip -qq -r ../artifacts/${{ vars.APP_NAME }}${{ inputs.zip-suffix }} ${{ vars.APP_NAME }}.app

      # DMG can fails a lot apparently, so simply try again
      # Error: `hdiutil: detach failed`...
      # See: https://github.com/actions/runner-images/issues/7522
      - name: Create DMG
        if: ${{ inputs.generate-dmg }}
        run: |
          npm install --global starburst997/create-dmg
      - uses: starburst997/retry@v3
        if: ${{ inputs.generate-dmg }}
        with:
          timeout_seconds: 15
          max_attempts: 5
          continue_on_error: true
          command: create-dmg "build/${{ vars.APP_NAME }}.app" build --overwrite --dmg-title=${{ vars.APP_NAME_DISPLAY }}

      - name: Sign DMG
        if: ${{ inputs.generate-dmg }}
        continue-on-error: true
        env:
          APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
          APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

          MATCH_REPOSITORY: ${{ secrets.MATCH_REPOSITORY }}
          MATCH_DEPLOY_KEY: ${{ secrets.MATCH_DEPLOY_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_P8: ${{ secrets.APPSTORE_P8 }}

          MAC_BUILD_PATH: ${{ format('{0}/{1}', github.workspace, 'project') }}
          MAC_BUNDLE_ID: ${{ vars.MAC_BUNDLE_ID }}

          PROJECT_TARGET: "${{ env.TARGET }}"
          XCODEPROJ_PATH: "StandaloneOSX.xcodeproj"
          PLIST_PATH: "${{ env.TARGET }}/Info.plist"
          ENTITLEMENTS: Unity.entitlements
          VERSION: "false" # "${{ needs.version.outputs.year }}.${{ needs.version.outputs.release }}"
          BUILD_NUMBER: ${{ needs.version.outputs.build }}
          BUILD_PATH: build

          GENERATE_APPSTORE: ${{ inputs.generate-appstore }}
          GENERATE_DEVELOPER_ID: 'true' # Always create .app
          GENERATE_PKG: 'false' # Currently not working
          GENERATE_DMG: ${{ inputs.generate-dmg }}
        shell: bash
        run: |
          find build -name '*.dmg' -exec mv '{}' build/developer-id.dmg \;
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${MATCH_DEPLOY_KEY}"
          bundle exec fastlane mac notarize_dmg
          mv build/developer-id.dmg artifacts/${{ vars.APP_NAME }}${{ inputs.dmg-suffix }}

      - name: Cleanup
        run: rm -Rf build

      - name: Re-upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact }}
          path: artifacts
          overwrite: true

  post-build:
    name: Post Build
    runs-on: ${{ inputs.runner-extra }}
    needs: [version, build, sign]
    outputs:
      zip-name: ${{ steps.vars.outputs.zip-name }}
      zip-url: ${{ steps.vars.outputs.zip-url }}
      zip-size: ${{ steps.vars.outputs.zip-size }}
      dmg-name: ${{ steps.vars.outputs.dmg-name }}
      dmg-url: ${{ steps.vars.outputs.dmg-url }}
      dmg-size: ${{ steps.vars.outputs.dmg-size }}
      links: ${{ steps.vars.outputs.links }}
    steps:
      - run: rm -Rf build
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact }}
          path: build

      - name: Set vars for release
        run: |
          echo LANE="Internal" >> $GITHUB_ENV
          echo S3_LANE="internal" >> $GITHUB_ENV
      - if: ${{ inputs.release == 'true' }}
        run: |
          echo LANE="Release Candidate" >> $GITHUB_ENV
          echo S3_LANE="rc" >> $GITHUB_ENV

      - name: Upload to S3 but keep the latest 5 only
        uses: starburst997/s3-upload-action@v1
        if: ${{ needs.build.outputs.s3 == 'true' }}
        with:
          key-id: ${{ secrets.S3_KEY_ID }}
          secret-access-key: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          region: ${{ secrets.S3_REGION }}
          endpoint: ${{ secrets.S3_ENDPOINT }}
          bucket: ${{ vars.S3_BUCKET }}

          src-dir: 'build'
          dst-dir: '${{ vars.S3_PATH }}/${{ env.S3_LANE }}/${{ inputs.s3-folder }}'
          dst-version: '${{ needs.version.outputs.version }}'
          keep: 5
          sha: true

      - name: Calculate duration
        run: |
          printf -v now '%(%s)T'
          duration=$((now - ${{ needs.version.outputs.time }}))
          echo "DURATION=$(echo $duration | awk '{printf "%02d:%02d:%02d", $1/3600, ($1/60)%60, $1%60}')" >> $GITHUB_ENV

      - name: Release notes
        if: ${{ inputs.notes != '' }}
        run: echo NOTES="${{ inputs.notes }}" >> $GITHUB_ENV
      - if: ${{ inputs.notes == '' }}
        run: echo NOTES="No notes" >> $GITHUB_ENV

      - name: Create some vars
        run: |
          echo ZIP_NAME="${{ vars.APP_NAME }}${{ inputs.zip-suffix }}" >> $GITHUB_ENV
          echo ZIP_URL="${{ vars.S3_URL }}/${{ vars.S3_PATH }}/$S3_LANE/${{ inputs.s3-folder }}/${{ needs.version.outputs.version }}/${{ vars.APP_NAME }}${{ inputs.zip-suffix }}" >> $GITHUB_ENV
          echo ZIP_SIZE=$(ls -lah build/${{ vars.APP_NAME }}${{ inputs.zip-suffix }} | awk -F " " {'print $5'}) >> $GITHUB_ENV
          echo DMG_NAME="${{ vars.APP_NAME }}${{ inputs.dmg-suffix }}" >> $GITHUB_ENV
          echo DMG_URL="${{ vars.S3_URL }}/${{ vars.S3_PATH }}/$S3_LANE/${{ inputs.s3-folder }}/${{ needs.version.outputs.version }}/${{ vars.APP_NAME }}${{ inputs.dmg-suffix }}" >> $GITHUB_ENV
          echo DMG_SIZE=$(ls -lah build/${{ vars.APP_NAME }}${{ inputs.dmg-suffix }} | awk -F " " {'print $5'}) >> $GITHUB_ENV

      - name: Create links
        if: ${{ needs.build.outputs.s3 == 'true' }}
        run: echo LINKS="\n- [$ZIP_NAME]($ZIP_URL) ($ZIP_SIZE)" >> $GITHUB_ENV
      - if: ${{ needs.build.outputs.s3 == 'true' }}
        run: echo LINKS="$LINKS\n- [$DMG_NAME]($DMG_URL) ($DMG_SIZE)" >> $GITHUB_ENV
      - if: ${{ vars.TESTFLIGHT_INVITE != '' }}
        run: echo LINKS="$LINKS\n- [Get on Testflight](${{ vars.TESTFLIGHT_INVITE }})" >> $GITHUB_ENV

      - id: vars
        run: |
          echo "zip-name=$ZIP_NAME" >> $GITHUB_OUTPUT
          echo "zip-url=$ZIP_URL" >> $GITHUB_OUTPUT
          echo "zip-size=$ZIP_SIZE" >> $GITHUB_OUTPUT
          echo "dmg-name=$DMG_NAME" >> $GITHUB_OUTPUT
          echo "dmg-url=$DMG_URL" >> $GITHUB_OUTPUT
          echo "dmg-size=$DMG_SIZE" >> $GITHUB_OUTPUT
          echo "links=$LINKS" >> $GITHUB_OUTPUT

      - uses: starburst997/get-previous-action@v1
        id: previous
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Discord Notification
        if: ${{ needs.build.outputs.discord == 'true' }}
        uses: starburst997/discord-webhook-notify@v2
        with:
          severity: info
          color: ${{ env.DISCORD_COLOR }}
          text: "**${{ env.LANE }}**: New ${{ inputs.discord }} build available!"
          description: "${{ env.NOTES }}\n"
          footer: "Build time: ${{ env.DURATION }}"
          details: "Download:${{ env.LINKS }}\n\nv${{ needs.version.outputs.version }} - [${{ needs.version.outputs.commit-sha }}](${{ needs.version.outputs.commit-url }}) ([diff](${{ steps.previous.outputs.diff-url }}))"
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
          username: ${{ vars.DISCORD_USERNAME }}
          avatarUrl: ${{ vars.DISCORD_AVATAR }}

      - name: Delete artifact
        if: ${{ inputs.upload-artifact != 'true' }}
        uses: starburst997/delete-artifact@v5
        with:
          name: ${{ inputs.artifact }}

  failure:
    name: Failure
    runs-on: ${{ inputs.runner-extra }}
    if: failure()
    needs: [version, build, post-build]
    steps:
      - name: Calculate duration
        run: |
          printf -v now '%(%s)T'
          duration=$((now - ${{ needs.version.outputs.time }}))
          echo "DURATION=$(echo $duration | awk '{printf "%02d:%02d:%02d", $1/3600, ($1/60)%60, $1%60}')" >> $GITHUB_ENV
      - name: Discord Notification
        uses: starburst997/discord-webhook-notify@v2
        if: ${{ env.DISCORD_WEBHOOK != '' }}
        with:
          severity: error
          color: "#FF0000"
          text: "**Failure**: ${{ inputs.discord }} build failed!"
          description: "Build failed!\n"
          footer: "Build time: ${{ env.DURATION }}"
          details: "Links:\n- [Action Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\nv${{ needs.version.outputs.version }}"
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
          username: ${{ vars.DISCORD_USERNAME }}
          avatarUrl: ${{ vars.DISCORD_AVATAR }}