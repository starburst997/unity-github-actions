name: Build Android

env:
  UNITY_ANDROID_API: AndroidApiLevel34
  UNITY_PATH: ${{ vars.APP_UNITY_PATH }}
  UNITY_VERSION: ${{ vars.APP_UNITY_VERSION }}
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
  DISCORD_COLOR: "#a4c639"

on: 
  workflow_call:
    outputs:
      apk-name: 
        value: ${{ jobs.post-build.outputs.apk-name }}
      apk-url: 
        value: ${{ jobs.post-build.outputs.apk-url }}
      apk-size: 
        value: ${{ jobs.post-build.outputs.apk-size }}
      links: 
        value: ${{ jobs.post-build.outputs.links }}
    inputs:
      notes:
        default: ''
        type: string
      upload-artifact:
        default: 'false'
        type: string
      google-play:
        default: 'true'
        type: string
      lane:
        default: 'internal'
        type: string
      il2cpp:
        default: '0'
        type: string
      library:
        default: 'Library-Android'
        type: string
      artifact:
        default: 'build-android'
        type: string
      s3-folder:
        default: 'android'
        type: string
      discord:
        default: 'Android'
        type: string
      release:
        default: 'false'
        type: string
      timeout:
        default: 60
        type: number
      runner:
        default: 'ubuntu-latest'
        type: string
      runner-extra:
        default: 'ubuntu-latest'
        type: string

jobs:
  version:
    uses: starburst997/yearly-version/.github/workflows/version.yml@v1
    secrets: inherit
    with:
      increment: false
      runner: ${{ inputs.runner-extra }}
      build-var: ANDROID_BUILD_NUMBER

  build:
    name: Build Android
    runs-on: ${{ inputs.runner }}
    timeout-minutes: ${{ inputs.timeout }}
    needs: [version]
    outputs:
      discord: ${{ steps.output.outputs.discord }}
      s3: ${{ steps.output.outputs.s3 }}
    steps:
      - name: Free Disk Space
        if: ${{ inputs.runner != 'self-hosted' && inputs.runner != 'self-hosted-linux' }}
        uses: starburst997/free-disk-space@main
        with:
          large-packages: false

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GH_PAT }}
          lfs: true

      - uses: actions/cache/restore@v4
        id: cache
        with:
          path: ${{ env.UNITY_PATH }}/Library
          key: ${{ inputs.library }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - run: pip install -r requirements.txt

      - name: Change package name / set IL2CPP
        run: python scripts/workflows/update-project.py "${{ env.UNITY_PATH }}" ${{ vars.IOS_BUNDLE_ID }} ${{ vars.MAC_BUNDLE_ID }} ${{ vars.ANDROID_PACKAGE_NAME }} 1 ${{ needs.version.outputs.build }}

      - name: Create directory first to prevent permission error
        run: |
          rm -Rf build
          mkdir build

      - name: Build project
        uses: starburst997/unity-builder@v4
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          runAsHostUser: true
          allowDirtyBuild: true
          targetPlatform: Android
          unityVersion: ${{ env.UNITY_VERSION }}
          projectPath: ${{ env.UNITY_PATH }}
          versioning: Custom
          version: ${{ needs.version.outputs.version }}
          androidExportType: androidAppBundle
          androidKeystoreName: user # This file won't exist, but this property needs to exist.
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
          androidTargetSdkVersion: ${{ env.UNITY_ANDROID_API }}
          androidVersionCode: ${{ needs.version.outputs.build }}
          androidSymbolType: none # debugging # Will generate a file named: "Android-2025.1.1-v1-IL2CPP.symbols.zip"

      - name: Detect if we can code sign / generate setup
        id: output
        run: |
          echo "discord=${{ secrets.DISCORD_WEBHOOK != '' }}" >> $GITHUB_OUTPUT
          echo "s3=${{ secrets.S3_SECRET_ACCESS_KEY != '' }}" >> $GITHUB_OUTPUT
      
      - uses: actions/upload-artifact@v4
        with:
          name: build-android
          path: |
            build/Android
            !**/*.pdb
            !**/*_DoNotShip
            !**/*_ButDontShipItWithYourGame

      - uses: actions/cache/save@v4
        if: always() && steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ env.UNITY_PATH }}/Library
          key: ${{ inputs.library }}

  sign:
    name: Code Signing
    runs-on: ${{ inputs.runner-extra }}
    needs: [version, build]
    timeout-minutes: 30
    env:
      GOOGLE_PLAY_KEY_FILE: ${{ secrets.GOOGLE_PLAY_KEY_FILE }}
      GOOGLE_PLAY_KEY_FILE_PATH:
        ${{ format('{0}/fastlane/google-fastlane.json', github.workspace) }}
      ANDROID_BUILD_FILE_PATH: ${{ format('{0}/build/Android.aab', github.workspace) }}
      ANDROID_PACKAGE_NAME: ${{ vars.ANDROID_PACKAGE_NAME }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - run: rm -Rf build
      - name: Download Android Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact }}
          path: build

      - name: Add Authentication
        run: echo "$GOOGLE_PLAY_KEY_FILE" > $GOOGLE_PLAY_KEY_FILE_PATH

      - name: Set up Fastlane
        uses: starburst997/setup-ruby@jd
        with:
          ruby-version: 3.2
          bundler-cache: true
          add-platform: true

      - name: Upload to Google Play Internal
        uses: starburst997/fastlane-action@v3.0.0
        if: ${{ inputs.google-play == 'true' }}
        with:
          lane: 'android ${{ inputs.lane }}'

      # Create APK from AAB
      - uses: actions/setup-java@v4
        with:
          distribution: 'jetbrains'
          java-version: '21'

      - name: Save .keystore
        working-directory: build
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > .keystore

      # Convert PKCS12 keystore to JKS (if possible)
      - name: Convert keystore
        continue-on-error: true
        working-directory: build
        run: |
          keytool -importkeystore -srckeystore .keystore -destkeystore keystore.jks -srcstoretype PKCS12 \
          -deststoretype jks -srcstorepass ${{ secrets.ANDROID_KEYSTORE_PASS }} -deststorepass ${{ secrets.ANDROID_KEYSTORE_PASS }} \
          -srcalias ${{ secrets.ANDROID_KEYALIAS_NAME }} -destalias ${{ secrets.ANDROID_KEYALIAS_NAME }} \
          -srckeypass ${{ secrets.ANDROID_KEYALIAS_PASS }} -destkeypass ${{ secrets.ANDROID_KEYALIAS_PASS }}
          rm .keystore
          mv keystore.jks .keystore

      - name: Unsign AAB
        continue-on-error: true
        working-directory: build
        run: |
          cp Android.aab Android_signed.aab
          zip -d Android.aab META-INF/\* || true

      # Download bundletool to generate a .APK from the .AAB for external distribution
      - name: Generate .APK (signed)
        working-directory: build
        run: |
          json=$(curl -s https://api.github.com/repos/google/bundletool/releases/latest)
          downloadUrl=$(echo $json | jq -r ".assets | .[].browser_download_url")
          curl $downloadUrl -4 -sL -o 'bundletool.jar'

          java -jar bundletool.jar build-apks --bundle=Android.aab --output=android.apks \
          --mode=universal \
          --ks=.keystore \
          --ks-pass="pass:${{ secrets.ANDROID_KEYALIAS_PASS }}" \
          --ks-key-alias=${{ secrets.ANDROID_KEYALIAS_NAME }} \
          --key-pass="pass:${{ secrets.ANDROID_KEYSTORE_PASS }}"

          unzip -p android.apks universal.apk > android.apk

          rm android.apks
          rm bundletool.jar

      - name: Unsign APK
        continue-on-error: true
        working-directory: build
        run: |
          zip -d android.apk META-INF/\* || true

      - name: Sign APK
        working-directory: build
        run: |
          jarsigner -sigalg SHA256withRSA -digestalg SHA-256 \
          -keystore .keystore -storepass "${{ secrets.ANDROID_KEYSTORE_PASS }}" -keypass "${{ secrets.ANDROID_KEYALIAS_PASS }}" \
          "android.apk" "${{ secrets.ANDROID_KEYALIAS_NAME }}"

      - name: Cleanup
        if: ${{ inputs.google-play == 'true' }}
        working-directory: build
        run: |
          rm Android_signed.aab
      
      - name: Cleanup
        if: ${{ inputs.google-play != 'true' }}
        working-directory: build
        run: |
          mv Android_signed.aab ${{ vars.APP_NAME }}.aab

      - name: Cleanup
        working-directory: build
        run: |
          rm -f .keystore
          rm Android.aab
          mv android.apk ${{ vars.APP_NAME }}.apk

      - name: Re-upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact }}
          path: build
          overwrite: true

  post-build:
    name: Post Build
    runs-on: ${{ inputs.runner-extra }}
    needs: [version, build, sign]
    outputs:
      apk-name: ${{ steps.vars.outputs.apk-name }}
      apk-url: ${{ steps.vars.outputs.apk-url }}
      apk-size: ${{ steps.vars.outputs.apk-size }}
      links: ${{ steps.vars.outputs.links }}
    steps:
      - run: rm -Rf build
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact }}
          path: build

      - name: Set vars for release
        run: |
          echo LANE="Internal" >> $GITHUB_ENV
          echo S3_LANE="internal" >> $GITHUB_ENV
      - if: ${{ inputs.release == 'true' }}
        run: |
          echo LANE="Release Candidate" >> $GITHUB_ENV
          echo S3_LANE="rc" >> $GITHUB_ENV

      - name: Upload to S3 but keep the latest 5 only
        uses: starburst997/s3-upload-action@v1
        if: ${{ needs.build.outputs.s3 == 'true' }}
        with:
          key-id: ${{ secrets.S3_KEY_ID }}
          secret-access-key: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          region: ${{ secrets.S3_REGION }}
          endpoint: ${{ secrets.S3_ENDPOINT }}
          bucket: ${{ vars.S3_BUCKET }}

          src-dir: 'build'
          dst-dir: '${{ vars.S3_PATH }}/${{ env.S3_LANE }}/${{ inputs.s3-folder }}'
          dst-version: '${{ needs.version.outputs.version }}'
          keep: 5
          sha: true

      - name: Calculate duration
        run: |
          printf -v now '%(%s)T'
          duration=$((now - ${{ needs.version.outputs.time }}))
          echo "DURATION=$(echo $duration | awk '{printf "%02d:%02d:%02d", $1/3600, ($1/60)%60, $1%60}')" >> $GITHUB_ENV

      - name: Release notes
        if: ${{ inputs.notes != '' }}
        run: echo NOTES="${{ inputs.notes }}" >> $GITHUB_ENV
      - if: ${{ inputs.notes == '' }}
        run: echo NOTES="No notes" >> $GITHUB_ENV

      - name: Create some vars
        run: |
          echo APK_NAME="${{ vars.APP_NAME }}.apk" >> $GITHUB_ENV
          echo APK_URL="${{ vars.S3_URL }}/${{ vars.S3_PATH }}/$S3_LANE/${{ inputs.s3-folder }}/${{ needs.version.outputs.version }}/${{ vars.APP_NAME }}.apk" >> $GITHUB_ENV
          echo APK_SIZE=$(ls -lah build/${{ vars.APP_NAME }}.apk | awk -F " " {'print $5'}) >> $GITHUB_ENV

      - name: Create links
        if: ${{ needs.build.outputs.s3 == 'true' }}
        run: echo LINKS="\n- [$APK_NAME]($APK_URL) ($APK_SIZE)" >> $GITHUB_ENV
      - if: ${{ vars.GOOGLE_PLAY_INVITE != '' }}
        run: echo LINKS="$LINKS\n- [Get on Google Play](${{ vars.GOOGLE_PLAY_INVITE }})" >> $GITHUB_ENV

      - id: vars
        run: |
          echo "apk-name=$APK_NAME" >> $GITHUB_OUTPUT
          echo "apk-url=$APK_URL" >> $GITHUB_OUTPUT
          echo "apk-size=$APK_SIZE" >> $GITHUB_OUTPUT
          echo "links=$LINKS" >> $GITHUB_OUTPUT

      - uses: starburst997/get-previous-action@v1
        id: previous
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Discord Notification
        if: ${{ needs.build.outputs.discord == 'true' }}
        uses: starburst997/discord-webhook-notify@v2
        with:
          severity: info
          color: ${{ env.DISCORD_COLOR }}
          text: "**${{ env.LANE }}**: New ${{ inputs.discord }} build available!"
          description: "${{ env.NOTES }}\n"
          footer: "Build time: ${{ env.DURATION }}"
          details: "Download:${{ env.LINKS }}\n\nv${{ needs.version.outputs.version }} - [${{ needs.version.outputs.commit-sha }}](${{ needs.version.outputs.commit-url }}) ([diff](${{ steps.previous.outputs.diff-url }}))"
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
          username: ${{ vars.DISCORD_USERNAME }}
          avatarUrl: ${{ vars.DISCORD_AVATAR }}

      - name: Delete artifact
        if: ${{ inputs.upload-artifact != 'true' }}
        uses: starburst997/delete-artifact@v5
        with:
          name: ${{ inputs.artifact }}

  failure:
    name: Failure
    runs-on: ${{ inputs.runner-extra }}
    if: failure()
    needs: [version, build, post-build]
    steps:
      - name: Calculate duration
        run: |
          printf -v now '%(%s)T'
          duration=$((now - ${{ needs.version.outputs.time }}))
          echo "DURATION=$(echo $duration | awk '{printf "%02d:%02d:%02d", $1/3600, ($1/60)%60, $1%60}')" >> $GITHUB_ENV
      - name: Discord Notification
        uses: starburst997/discord-webhook-notify@v2
        if: ${{ env.DISCORD_WEBHOOK != '' }}
        with:
          severity: error
          color: "#FF0000"
          text: "**Failure**: ${{ inputs.discord }} build failed!"
          description: "Build failed!\n"
          footer: "Build time: ${{ env.DURATION }}"
          details: "Links:\n- [Action Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\nv${{ needs.version.outputs.version }}"
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
          username: ${{ vars.DISCORD_USERNAME }}
          avatarUrl: ${{ vars.DISCORD_AVATAR }}